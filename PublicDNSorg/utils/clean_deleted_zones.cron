#!/usr/bin/perl
# ex: set tabstop=4 expandtab smarttab softtabstop=4 shiftwidth=4:

# $Source: /home/xubuntu/berlios_backup/github/tmp-cvs/pdnso/Repository/PublicDNSorg/utils/clean_deleted_zones.cron,v $
# $Revision: 1.1 $
# $Date: 2005/11/23 03:42:57 $
# $Author: unrtst $

=head1 NAME

clean_deleted_zones.cron - Public-DNS.org script to clean out all zones that have been deleted. Should be run from cron a few times a day (ex. every 8 hours)

=head1 SEE ALSO

utils/dns_crontab

=head1 AUTHOR

Joshua I. Miller <unrtst@cpan.org>

=head1 COPYRIGHT AND LICENSE

Copyright (c) 2002 by PurifiedData, LLC.

This library is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License version 2 as
published by the Free Software Foundation. (see COPYING)

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
02111-1307, USA

=cut


use strict;
use IO::Socket;
use PublicDNS::CryptWrapper;
use PublicDNS::DBlib;
use PublicDNS::Utils;
use PublicDNS::Config;

my $cfg = PublicDNS::Config::load_cfg() or die "Unable to load config file.";

my $reply_to    = $cfg->{'system'}->{'reply_to_email_addr'} || 'root';
my $admin_email = $cfg->{'system'}->{'admin_email_addr'}    || 'root';
my $system_name = $cfg->{'system'}->{'generic_system_name'} || 'Public-DNS.org DNS Management System';

my %mail = (
    from    => $reply_to,
    to      => $admin_email,
    subject => "$system_name Server Cleanup",
    msg     => "
$system_name Server Cleanup results.
Zones below were removed from $system_name.
-----------------------------------------
"
    );

my $deleted_a_zone;
my $get_changes = IteratedSQLSelect("zone,tld,Cid","Deleted_Domains");
while (my ($zone,$tld,$Cid) = $get_changes->fetchrow_array)
{
    $deleted_a_zone++;

    # send query to primary name server
    my $sock = new IO::Socket::INET (
        LocalAddr   => $cfg->{'daemon'}->{'webserver_addr'} || '',
        PeerAddr    => $cfg->{'daemon_master'}->{'addr'},
        PeerPort    => $cfg->{'daemon_master'}->{'port'} || 5201,
        Proto       => 'tcp'
        );
    if ($sock)
    {
        my $query = encrypt( ('remove',"$zone.$tld",$Cid,0) );
        print $sock $query;
        close($sock);
        $mail{msg} .= "\t$zone.$tld\n";
        SQLDelete('Deleted_Domains',"Cid = $Cid");
        SQLDelete('pending_data',"Cid = $Cid");
    } else { # end if $sock
        my %failed_mail = (
            from    => $reply_to,
            to      => $admin_email,
            subject => 'DNS Socket Open to Daemon FAILED - clean_deleted_zones.cron',
            msg     => "Failed trying to send remove command for domain:
    $zone.$tld
    for Cid: $Cid
" . localtime()
            );
        &send_mail(%failed_mail);
    } # end else from if $sock
}
$get_changes->finish;


if ($deleted_a_zone)
{
    my $sock = new IO::Socket::INET (
        LocalAddr   => $cfg->{'daemon'}->{'webserver_addr'} || '',
        PeerAddr    => $cfg->{'daemon_master'}->{'addr'},
        PeerPort    => $cfg->{'daemon_master'}->{'port'} || 5201,
        Proto       => 'tcp'
        );
    if ($sock)
    {
        my $query = encrypt( ('system','reconfig',0) );
        print $sock $query;
        close($sock);
        &send_mail(%mail);
    } else { # end if $sock
        my %mail = (
            from    => $reply_to,
            to      => $admin_email,
            subject => 'DNS Socket Open to Daemon FAILED - clean_deleted_zones.cron',
            msg     => "Failed trying to send reconfig after removing one or more zones.\n" . localtime()
            );
        &send_mail(%mail);
    } # end else from if $sock
}
